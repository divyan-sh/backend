{"version":3,"sources":["Server.js"],"names":["http","require","fs","requests","homeFile","readFileSync","replaceVal","file","newVal","newFile","replace","main","temp","toFixed","temp_min","temp_max","name","sys","country","weather","server","createServer","req","res","url","on","chunk","JSONData","JSON","parse","arrayData","realTimeData","map","val","join","writeHead","write","err","console","error","log","end","listen"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAMG,QAAQ,GAAGF,EAAE,CAACG,YAAH,CAAgB,cAAhB,EAAgC,OAAhC,CAAjB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,MAAP,EAAkB;AACnC,MAAIC,OAAO,GAAGF,IAAI,CAACG,OAAL,CACZ,aADY,YAET,CAACF,MAAM,CAACG,IAAP,CAAYC,IAAZ,GAAmB,MAApB,EAA4BC,OAA5B,CAAoC,CAApC,CAFS,EAAd;AAIAJ,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CACR,aADQ,EAER,CAACF,MAAM,CAACG,IAAP,CAAYG,QAAZ,GAAuB,MAAxB,EAAgCD,OAAhC,CAAwC,CAAxC,CAFQ,CAAV;AAIAJ,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CACR,aADQ,EAER,CAACF,MAAM,CAACG,IAAP,CAAYI,QAAZ,GAAuB,MAAxB,EAAgCF,OAAhC,CAAwC,CAAxC,CAFQ,CAAV;AAIAJ,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CAAgB,cAAhB,EAAgCF,MAAM,CAACQ,IAAvC,CAAV;AACAP,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CAAgB,aAAhB,EAA+BF,MAAM,CAACS,GAAP,CAAWC,OAA1C,CAAV;AACAT,EAAAA,OAAO,GAAGA,OAAO,CAACC,OAAR,CAAgB,gBAAhB,EAAkCF,MAAM,CAACW,OAAP,CAAe,CAAf,EAAkBR,IAApD,CAAV;AAEA,SAAOF,OAAP;AACD,CAlBD;;AAoBA,IAAMW,MAAM,GAAGpB,IAAI,CAACqB,YAAL,CAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7C,MAAID,GAAG,CAACE,GAAJ,IAAW,GAAf,EAAoB;AAClBrB,IAAAA,QAAQ,kGAAR,CAGGsB,EAHH,CAGM,MAHN,EAGc,UAACC,KAAD,EAAW;AACrB,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAjB;AACA,UAAMI,SAAS,GAAG,CAACH,QAAD,CAAlB,CAFqB,CAGrB;;AACA,UAAMI,YAAY,GAAGD,SAAS,CAC3BE,GADkB,CACd,UAACC,GAAD,EAAS;AACZ,eAAO3B,UAAU,CAACF,QAAD,EAAW6B,GAAX,CAAjB;AACD,OAHkB,EAIlBC,IAJkB,CAIb,EAJa,CAArB;AAKAX,MAAAA,GAAG,CAACY,SAAJ,CAAc,GAAd,EAAmB,WAAnB;AACAZ,MAAAA,GAAG,CAACa,KAAJ,CAAUL,YAAV;AACD,KAdH,EAeGN,EAfH,CAeM,KAfN,EAea,UAACY,GAAD,EAAS;AAClB,UAAIA,GAAJ,EAAS;AACPC,QAAAA,OAAO,CAACC,KAAR;AAGD;;AACDD,MAAAA,OAAO,CAACE,GAAR,CAAY,KAAZ;AACAjB,MAAAA,GAAG,CAACkB,GAAJ;AACD,KAvBH;AAwBD,GAzBD,MAyBO;AACLlB,IAAAA,GAAG,CAACY,SAAJ,CAAc,GAAd,EAAmB;AAAE,sBAAgB;AAAlB,KAAnB;AACAZ,IAAAA,GAAG,CAACkB,GAAJ;AACD;AACF,CA9Bc,CAAf;AAgCArB,MAAM,CAACsB,MAAP,CAAc,IAAd,EAAoB,WAApB,EAAiC,YAAM;AACrCJ,EAAAA,OAAO,CAACE,GAAR;AACD,CAFD","sourcesContent":["const http = require(\"http\");\r\nconst fs = require(\"fs\");\r\nconst requests = require(\"requests\");\r\n\r\nconst homeFile = fs.readFileSync(\"./index.html\", \"utf-8\");\r\n\r\nconst replaceVal = (file, newVal) => {\r\n  let newFile = file.replace(\r\n    \"{%tempVal%}\",\r\n    `${(newVal.main.temp - 273.15).toFixed(2)}`\r\n  );\r\n  newFile = newFile.replace(\r\n    \"{%tempMin%}\",\r\n    (newVal.main.temp_min - 273.15).toFixed(2)\r\n  );\r\n  newFile = newFile.replace(\r\n    \"{%tempMax%}\",\r\n    (newVal.main.temp_max - 273.15).toFixed(2)\r\n  );\r\n  newFile = newFile.replace(\"{%location%}\", newVal.name);\r\n  newFile = newFile.replace(\"{%country%}\", newVal.sys.country);\r\n  newFile = newFile.replace(\"{%tempStatus%}\", newVal.weather[0].main);\r\n\r\n  return newFile;\r\n};\r\n\r\nconst server = http.createServer((req, res) => {\r\n  if (req.url == \"/\") {\r\n    requests(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=indore&appid=71a8c7a2be7cf985a299657f9b550aca`\r\n    )\r\n      .on(\"data\", (chunk) => {\r\n        const JSONData = JSON.parse(chunk);\r\n        const arrayData = [JSONData];\r\n        // I convert the data into array so that i can easily map through that data..\r\n        const realTimeData = arrayData\r\n          .map((val) => {\r\n            return replaceVal(homeFile, val);\r\n          })\r\n          .join(\"\");\r\n        res.writeHead(200, \"text/html\");\r\n        res.write(realTimeData);\r\n      })\r\n      .on(\"end\", (err) => {\r\n        if (err) {\r\n          console.error(\r\n            `Something wrong happened could not fetch data from API`\r\n          );\r\n        }\r\n        console.log(\"END\");\r\n        res.end();\r\n      });\r\n  } else {\r\n    res.writeHead(404, { \"Content-Type\": \"text/html\" });\r\n    res.end(`<h1>File does not exit..-_-</h1>`);\r\n  }\r\n});\r\n\r\nserver.listen(8000, \"127.0.0.1\", () => {\r\n  console.log(`Server is listening on port 8000`);\r\n});\r\n"],"file":"Server.dev.js"}