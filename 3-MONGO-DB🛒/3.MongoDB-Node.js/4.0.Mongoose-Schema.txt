$ Schema and Models are the key features of Mongoose because of these we can app;y validation on our database so that it is more efficient.

# What is Schema:
  -Schema defines the structure of your documents in this you specify the attributes for field of a document these attributes can be:
  Data type (e.g. String, Number, etc.).
  Whether or not it is required or optional.
  Is it’s value unique, meaning that the database is allowed to contain only one document with that value in that property.

  Schema helps us to validate our data before inserting in into database.
  It is similar as we create tables in the Sql there we define the data types of each field of column while creating the table.
  defines the structure of a document means that we will specify what should be the value of a particular field when u insert data in that document.
  whether the value is of string or any other data type, the value is optional or mandatory to insert, what will be default value if nothing is inserted.

? Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.
  Let's see how to define it..
  > import mongoose from 'mongoose';
  > const { Schema } = mongoose;

  > const blogSchema = new Schema({
  >   title:  String, // String is shorthand for {type: String}
  >   author: String,
  >   body:   String,
  >   comments: [{ body: String, date: Date }],
  >   date: { type: Date, default: Date.now },
  >   hidden: Boolean,
  >   meta: {
  >     votes: Number,
  >     favs:  Number
  >   }
  > });
  Here we define different schema types for each field of a document. ex: the value of the title key of this document should be STRING,
  We can not only mention the data type of that field but also the default value for any field.

? Each field you defined in a schema is called "PATH", and you can access it like this...
  > const schema = new Schema({ name: String });
  > schema.path('name') instanceof mongoose.SchemaType; // true
  > schema.path('name') instanceof mongoose.Schema.Types.String; // true
  > schema.path('name').instance; // 'String'

? Schema Types: 
  A SchemaType is then a configuration object for an individual property. A SchemaType says what type a given path should have, whether it has any getters/setters, and what values are valid for that path.
  The following are all the valid SchemaTypes in Mongoose:
  + String
  + Number
  + Date
  + Buffer
  + Boolean
  + Mixed
  + ObjectId
  + Array
  + Decimal128
  + Map
  + Schema
  -- Mixed, ObjectId and Decimal128 are defined under require(‘mongoose’).Schema.Types.

  > const schema = new Schema({
  > name:    String,
  > binary:  Buffer,
  > living:  Boolean,
  > updated: { type: Date, default: Date.now },
  > age:     { type: Number, min: 18, max: 65 },
  > mixed:   Schema.Types.Mixed,
  > _someId: Schema.Types.ObjectId,
  > decimal: Schema.Types.Decimal128,
  > array: [],
  > ofString: [String],
  > ofNumber: [Number],
  > ofDates: [Date],
  > ofBuffer: [Buffer],
  > ofBoolean: [Boolean],
  > ofMixed: [Schema.Types.Mixed],
  > ofObjectId: [Schema.Types.ObjectId],
  > ofArrays: [[]],
  > ofArrayOfNumbers: [[Number]],
  > nested: {
  >   stuff: { type: String, lowercase: true, trim: true }
  > },
  > map: Map,
  > mapOfString: {
  >   type: Map,
  >   of: String
  > }
  >})

  --The `type` Key: type is a special property in Mongoose schemas. When Mongoose finds a nested property named type in your schema, Mongoose assumes that it needs to define a SchemaType with the given type.
  > const schema = new Schema({
  >   name: { type: String },
  >   nested: {
  >     firstName: { type: String },
  >     lastName: { type: String }
  >   }
  > });

  As a consequence, you need a little extra work to define a property named type in your schema.For example, suppose you're building a stock portfolio app, and you want to store the asset's type (stock, bond, ETF, etc.). Naively, you might define your schema as shown below:
  > const holdingSchema = new Schema({
    // You might expect `asset` to be an object that has 2 properties,
    // but unfortunately `type` is special in Mongoose so mongoose
    // interprets this schema to mean that `asset` is a string
  >   asset: {
  >     type: String,
  >     ticker: String
  >   }
  > });

  However, when Mongoose sees type: String, it assumes that you mean asset should be a string, not an object with a property type. The correct way to define an object with a property type is shown below.
  > const holdingSchema = new Schema({
  >   asset: {
      // Workaround to make sure Mongoose knows `asset` is an object
      // and `asset.type` is a string, rather than thinking `asset`
      // is a string.
  >     type: { type: String },
  >     ticker: String
  >   }
  > });

  You can declare a schema type using the type directly, or an object with a type property.
  > const schema1 = new Schema({
  >   test: String // `test` is a path of type String
  > });
  
  > const schema2 = new Schema({
    // The `test` object contains the "SchemaType options"
  >   test: { type: String } // `test` is a path of type string
  > });
  
  In addition to the type property, you can specify additional properties for a path. For example, if you want to lowercase a string before saving:
  > const schema2 = new Schema({
  >   test: {
  >     type: String,
  >     lowercase: true // Always convert `test` to lowercase
  >   }
  > });
  
  Mongoose comes with support for several built-in SchemaType options, like lowercase in the above example.All Schema Types options
  + required: boolean or function, if true adds a required validator for this property
  + default: Any or function, sets a default value for the path. If the value is a function, the return value of the function is used as the default.
  + select: boolean, specifies default projections for queries
  + validate: function, adds a validator function for this property
  + get: function, defines a custom getter for this property using Object.defineProperty().
  + set: function, defines a custom setter for this property using Object.defineProperty().
  + alias: string, mongoose >= 4.10.0 only. Defines a virtual with the given name that gets/sets this path.
  + immutable: boolean, defines path as immutable. Mongoose prevents you from changing immutable paths unless the parent document has isNew: true.
  + transform: function, Mongoose calls this function when you call Document#toJSON() function, including when you JSON.stringify() a document.

  > const numberSchema = new Schema({
  >   integerOnly: {
  >     type: Number,
  >     get: v => Math.round(v),
  >     set: v => Math.round(v),
  >     alias: 'i'
  >   }
  > });
  > 
  > const Number = mongoose.model('Number', numberSchema);
  > 
  > const doc = new Number();
  > doc.integerOnly = 2.001;
  > doc.integerOnly; // 2
  > doc.i; // 2
  > doc.i = 3.001;
  > doc.integerOnly; // 3
  > doc.i; // 3

For in Details Schema Types: .. https://mongoosejs.com/docs/schematypes.html

Now as we generate our schema now its time to bind the model out of that schema which directly interacts with the database.

# Schema ----> Model
  To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
  > const Blog = mongoose.model('Blog', blogSchema);

# By default, Mongoose adds an _id property to your schemas.
  > const schema = new Schema();
  > schema.path('_id'); // ObjectId { ... }
  -- You can also overwrite Mongoose's default _id with your own _id. Just be careful: Mongoose will refuse to save a document that doesn't have an _id, so you're responsible for setting _id if you define your own _id path.
  > const schema = new Schema({ _id: Number });
  > const Model = mongoose.model('Test', schema);

  > const doc = new Model();
  > await doc.save(); // Throws "document must have an _id before saving"

  > doc._id = 1;
  > await doc.save(); // works


# https://mongoosejs.com/docs/guide.html