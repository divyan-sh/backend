$ Validation: 
  + Validation is defined in the SchemaType
  + Validation is middleware. Mongoose registers validation as a pre('save') hook on every schema by default.
  + You can disable automatic validation before save by setting the validateBeforeSave option
  + You can manually run validation using doc.validate(callback) or doc.validateSync()
  + You can manually mark a field as invalid (causing validation to fail) by using doc.invalidate(...)
  + Validators are not run on undefined values. The only exception is the required validator.
  + Validation is asynchronously recursive; when you call Model#save, sub-document validation is executed as well. If an error occurs, your Model#save callback receives it
  + Validation is customizable

  > const schema = new Schema({
  >   name: {
  >     type: String,
  >     required: true
  >   }
  > });
  > const Cat = db.model('Cat', schema);
  > // This cat has no name :(
  > const cat = new Cat();
  > cat.save(function(error) {
  >   assert.equal(error.errors['name'].message,
  >     'Path `name` is required.');
  
  >   error = cat.validateSync();
  >   assert.equal(error.errors['name'].message,
  >     'Path `name` is required.');
  > });

# Built-In Validators: 
  Some Validators are specific to some schema types while some are validators are available to all the schema types:

  - Validators available to all the schema types:
  + Required: All SchemaTypes have the built-in required validator. The required validator uses the SchemaType's checkRequired() function to determine if the value satisfies the required validator.

  - String Built In Validators:
  + lowercase: boolean, whether to always call .toLowerCase() on the value
  + uppercase: boolean, whether to always call .toUpperCase() on the value
  + trim: boolean, whether to always call .trim() on the value
  + match: RegExp, creates a validator that checks if the value matches the given regular expression
  + enum: Array, creates a validator that checks if the value is in the given array.
  + minLength: Number, creates a validator that checks if the value length is not less than the given number
  + maxLength: Number, creates a validator that checks if the value length is not greater than the given number
    
  - Numbers Built In Validators:
  + min: Number, creates a validator that checks if the value is greater than or equal to the given minimum.
  + max: Number, creates a validator that checks if the value is less than or equal to the given maximum.
  + enum: Array, creates a validator that checks if the value is strictly equal to one of the values in the given array.

  - Date Built In Validators:
  + min: Date
  + max: Date

  > const breakfastSchema = new Schema({
  >   eggs: {
  >     type: Number,
  >     min: [6, 'Too few eggs'],
  -     // The second argument is for custom message..
  >     max: 12
  >   },
  >   bacon: {
  >     type: Number,
  >     required: [true, 'Why no bacon?']
  -     // The second argument is for custom message..
  > 
  >   },
  >   drink: {
  >     type: String,
  >     lowercase: true,
  >     trim: true,
  >     enum: ['Coffee', 'Tea'],
  -     // You can also define your custom required definition.
  >     required: function() {
  >       return this.bacon > 3;
  >     }
  >   }
  > });
  > const Breakfast = db.model('Breakfast', breakfastSchema);
  
  > const badBreakfast = new Breakfast({
  >   eggs: 2,
  >   bacon: 0,
  >   drink: 'Milk'
  > });

  - Defining Custom Errors Message.
  > let error = badBreakfast.validateSync();
  > assert.equal(error.errors['eggs'].message,
  >   'Too few eggs');
  > assert.ok(!error.errors['bacon']);
  > assert.equal(error.errors['drink'].message,
  >   '`Milk` is not a valid enum value for path `drink`.');
  > 
  > badBreakfast.bacon = 5;
  > badBreakfast.drink = null;
  > 
  > error = badBreakfast.validateSync();
  > assert.equal(error.errors['drink'].message, 'Path `drink` is required.');
  > 
  > badBreakfast.bacon = null;
  > error = badBreakfast.validateSync();
  > assert.equal(error.errors['bacon'].message, 'Why no bacon?');

# The unique Option is Not a Validator
  A common gotcha for beginners is that the unique option for schemas is not a validator. It's a convenient helper for building MongoDB unique indexes. 

# Custom Validators:
  If the built-in validators aren't enough, you can define custom validators to suit your needs.
  Custom validation is declared by passing a validation function
  > const userSchema = new Schema({
  >   phone: {
  >     type: String,
  >     validate: { 
  >       validator: function(v) {
  >         return /\d{3}-\d{3}-\d{4}/.test(v);
  >       },
  >       message: props => `${props.value} is not a valid phone number!`
  >     },
  >     required: [true, 'User phone number required']
  >   }
  > });
  
  > const User = db.model('user', userSchema);
  > const user = new User();
  > let error;
  
  > user.phone = '555.0123';
  > error = user.validateSync();
  > assert.equal(error.errors['phone'].message,
  >   '555.0123 is not a valid phone number!');
  
  > user.phone = '';
  > error = user.validateSync();
  > assert.equal(error.errors['phone'].message,
  >   'User phone number required');
  
  > user.phone = '201-555-0123';
  > // Validation succeeds! Phone number is defined
  > // and fits `DDD-DDD-DDDD`
  > error = user.validateSync();
  > assert.equal(error, null);
  

# You can also install additional validation packages from npm
  npm i validator
  These is a npm package which is very helpful for validation such as email validation, phone number validation etc.